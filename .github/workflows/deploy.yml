name: Deploy Dockerized FastAPI App

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  IMAGE_NAME: mirzahaiderocloud/cicd-example

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download Terraform
      run: |
        wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform

        export AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Provision Infrastructure via Terraform
      run: |
        # Set up infra if not already set up
        # Store resource addresses (ec2, DB) to be used later

        cd infra && terraform init && terraform apply  
        VALUE=$(terraform output db_address)
        echo "DB_ADDRESS=$VALUE" >> $GITHUB_ENV

        VALUE=$(terraform output ec2_public_ip)
        echo "EC2_HOST=$VALUE" >> $GITHUB_ENV

        VALUE=$(cat terraform-key.pem)
        echo "EC2_KEY=$VALUE" >> $GITHUB_ENV
        cd ..

    - name: Add DB URL to .env
      run: |
        echo DATABASE_URL=${{ env.EC2_KEY }} >> .env

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
          
    - name: Deploy via SSH
      run: |
        echo "${{ env.EC2_KEY }}" > github-ec2.pem && chmod 600 github-ec2.pem
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem "ubuntu"@"${{env.EC2_HOST}}" << 'EOF'

        sudo docker stop cicd-example || true
        sudo docker rm cicd-example || true

        sudo docker pull ${{ env.IMAGE_NAME }}
        sudo docker run -d --name cicd-example -p 80:80 ${{ env.IMAGE_NAME }}
        EOF
